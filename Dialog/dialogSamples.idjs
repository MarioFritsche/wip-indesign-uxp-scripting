// Config
const dialogId = "myDialog";
const dialogConfig = {
  title: "InDesign Test UXP",
  size: {
    width: 500,
    height: 500,
  },
};

const preferscolorscheme = app.generalPreferences.uiBrightnessPreference;

// CSS
const styles = `
html, body {
  height: 100vh;
}

sp-heading, 
sp-label,
sp-action-button,
sp-button,
sp-detail {
  color: ${PreferColors(preferscolorscheme)};
  fill: ${PreferColors(preferscolorscheme)};
  border-color: ${PreferColors(preferscolorscheme)};
}

sp-theme {
  height: 100vh;
  overflow-y: hidden;
  display: flex;
  flex-direction: column;
  padding: 5px 5px 10px 10px;
}

div#${dialogId}-header {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding-bottom: 10px;
}

div#${dialogId}-main {
  flex: 1;
  overflow-y: scroll; 
  color: ${PreferColors(preferscolorscheme)};
}

div#${dialogId}-footer {
  display: flex;
  align-items: center;
  justify-content: end;
  padding-top: 20px;
}

sp-label,
sp-detail {
  font-size: 14px;
}

sp-textfield,
sp-dropdown {
  width: 400px;
}

sp-divider {
  margin-top:10px;
  margin-bottom:10px;
}

sp-detail {
  margin-bottom:10px;
}

`;

// HTML
const template = `
<!DOCTYPE html>
<html lang="de">
  <body>
    <sp-theme theme="sectrum" scale="medium">
      <div id="${dialogId}-header">
        <sp-heading size="X">Test-Dialog UXP</sp-heading>
      </div>

      <div id="${dialogId}-main">
        <sp-textfield id="${dialogId}-inputHinweis" placeholder="Dein Text">
          <sp-label isrequired="false" slot="label">Deine Eingabe</sp-label>
        </sp-textfield>
        <sp-action-button
          id="${dialogId}-bubbleOut"
          style="padding: 0; max-width: 32px; max-height: 32px"
          quiet>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            height="20"
            viewBox="0 0 20 20"
            width="20">
            <path
              class="fill"
              d="M16.5,1H1.5a.5.5,0,0,0-.5.5v7a.5.5,0,0,0,.5.5h1A.5.5,0,0,0,3,8.5V3H15V15H9.5a.5.5,0,0,0-.5.5v1a.5.5,0,0,0,.5.5h7a.5.5,0,0,0,.5-.5V1.5A.5.5,0,0,0,16.5,1Z" />
            <path
              class="fill"
              d="M9.318,13.882A.39051.39051,0,0,0,9.6,14a.4.4,0,0,0,.4-.377V8.25A.25.25,0,0,0,9.75,8H4.377A.4.4,0,0,0,4,8.4a.392.392,0,0,0,.1175.28l1.893,1.893-4.521,4.523a.5.5,0,0,0-.00039.70711l.00039.00039.707.707a.5.5,0,0,0,.707,0l4.5215-4.521Z" />
          </svg>
        </sp-action-button>

        <sp-divider class="divider" size="small"></sp-divider>

        <sp-dropdown
          id="${dialogId}-dropdownSelect"
          placeholder="Make a selection...">
          <sp-label slot="label">Deine Ausgabeliste</sp-label>
          <sp-menu slot="options">
            <sp-menu-item> Deselect </sp-menu-item>
            <sp-menu-item> Select inverse </sp-menu-item>
            <sp-menu-item> Feather... </sp-menu-item>
            <sp-menu-item> Select and mask... </sp-menu-item>
            <sp-menu-divider></sp-menu-divider>
            <sp-menu-item> Save selection </sp-menu-item>
            <sp-menu-item disabled> Make work path </sp-menu-item>
          </sp-menu>
        </sp-dropdown>
        <sp-action-button
          id="${dialogId}-dropdownOut"
          style="padding: 0; max-width: 32px; max-height: 32px"
          quiet>
          <svg
            xmlns="http://www.w3.org/2000/svg"
            height="20"
            viewBox="0 0 20 20"
            width="20">
            <path
              class="fill"
              d="M16.5,1H1.5a.5.5,0,0,0-.5.5v7a.5.5,0,0,0,.5.5h1A.5.5,0,0,0,3,8.5V3H15V15H9.5a.5.5,0,0,0-.5.5v1a.5.5,0,0,0,.5.5h7a.5.5,0,0,0,.5-.5V1.5A.5.5,0,0,0,16.5,1Z" />
            <path
              class="fill"
              d="M9.318,13.882A.39051.39051,0,0,0,9.6,14a.4.4,0,0,0,.4-.377V8.25A.25.25,0,0,0,9.75,8H4.377A.4.4,0,0,0,4,8.4a.392.392,0,0,0,.1175.28l1.893,1.893-4.521,4.523a.5.5,0,0,0-.00039.70711l.00039.00039.707.707a.5.5,0,0,0,.707,0l4.5215-4.521Z" />
          </svg>
        </sp-action-button>

        <sp-divider size="small"></sp-divider>
      </div>
      <div id="${dialogId}-footer">
        <sp-button id="${dialogId}-close-button">OK</sp-button>
      </div>
    </sp-theme>
  </body>
</html>
`;

function createDialog(dialogId, styles, template) {
  const styleElem = document.createElement("style");
  const stylesTextNode = document.createTextNode(styles);
  styleElem.appendChild(stylesTextNode);

  const headElem = document.querySelector("head");
  headElem.appendChild(styleElem);

  const dialogElem = document.createElement("dialog");
  dialogElem.setAttribute("id", dialogId);
  dialogElem.innerHTML = template;

  document.body.appendChild(dialogElem);

  const closeButtonElem = document.getElementById(`${dialogId}-close-button`);
  closeButtonElem.addEventListener("click", (evt) => {
    dialogElem.close("OK");
  });

  const inputText = document.getElementById(`${dialogId}-inputHinweis`);
  const bubbleElem = document.getElementById(`${dialogId}-bubbleOut`);
  bubbleElem.addEventListener("click", (evt) => {
    alert("Deine Eingabe", inputText.value);
  });

  const dropdownList = document.getElementById(`${dialogId}-dropdownSelect`);
  const dropdownElem = document.getElementById(`${dialogId}-dropdownOut`);
  dropdownElem.addEventListener("click", (evt) => {
    alert("Deine Liste", dropdownList.value);
  });

  return dialogElem;
}

const dialogElem = createDialog(dialogId, styles, template);
await dialogElem.showModal(dialogConfig);

// Systemfarbe
function PreferColors(prefersColor) {
  var prefersColor = "";
  switch (preferscolorscheme) {
    case 1.0:
      prefersColor = "rgb(56, 76, 95)";
      break;
    case 0.51:
      prefersColor = "rgb(56, 76, 95)";
      break;
    case 0.5:
      prefersColor = "rgb(222, 222, 222)";
      break;
    case 0.0:
      prefersColor = "rgb(222, 222, 222)";
      break;
  }

  return prefersColor;
}

function alert(messageTitle, message) {
  with ((theDialog = app.dialogs.add({ name: messageTitle }))) {
    with (dialogColumns.add()) {
      with (dialogRows.add()) {
        with (staticTexts.add()) {
          staticTexts.add({
            staticLabel: message,
          });
          with (dialogColumns.add()) {
            with (dialogColumns.add()) {
              dialogRows.canCancel = false;
              theDialog.show();
              theDialog.destroy();
            }
          }
        }
      }
    }
  }
}
